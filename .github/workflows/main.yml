name: React Native CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment for build'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - production
      distribute_to_firebase:
        description: 'Firebase App Distribution'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  build-android:
    name: Android CI/CD
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Dependencies
        uses: bahmutov/npm-install@v1

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      # Setup your .env
      - name: Setup .env file
        run: |
          echo "Selected environment: $ENVIRONMENT"

          if [ "$ENVIRONMENT" = "production" ]; then
            echo "${{ secrets.ENV_PROD_BASE64 }}" | base64 -d > .env
            echo ".env file configured for production."
          elif [ "$ENVIRONMENT" = "staging" ]; then
            echo "${{ secrets.ENV_STAGING_BASE64 }}" | base64 -d > .env
            echo ".env file configured for staging."
          else
            echo "${{ secrets.ENV_DEV_BASE64 }}" | base64 -d > .env
            echo ".env file configured for development."
          fi
          # Only print non-sensitive values here
          grep -E '^(ENV|BASE_URL)=' .env || echo "No public .env variables found."
        env:
          ENVIRONMENT: ${{ github.event.inputs.environment }}

      # Add debug.keystore
      - name: Setup Debug Keystore
        run: |
          mkdir -p android/app
          echo "${{ secrets.DEBUG_KEYSTORE_BASE64 }}" | base64 -d > android/app/debug.keystore

      # Add release.keystore
      - name: Setup Release Keystore
        run: |
          mkdir -p android/app
          echo "${{ secrets.RELEASE_KEYSTORE_BASE64 }}" | base64 -d > android/app/videocall.keystore

          if [ -f android/app/videocall.keystore ]; then
            echo "videocall.keystore created: $(du -h android/app/videocall.keystore | cut -f1)"
          else
            echo "Failed to create videocall.keystore!"
            exit 1
          fi

          # {
          #   echo "RELEASE_KEY_ALIAS=${{ secrets.RELEASE_KEY_ALIAS }}"
          #   echo "RELEASE_KEY_PASSWORD=${{ secrets.RELEASE_KEY_PASSWORD }}"
          #   echo "RELEASE_STORE_PASSWORD=${{ secrets.RELEASE_STORE_PASSWORD }}"
          # } >> android/gradle.properties

      # - name: Update VERSION_CODE and VERSION_NAME
      #   id: versioning
      #   run: |
      #     FILE="android/gradle.properties"
      #     CURRENT_VERSION=$(grep '^VERSION_CODE=' "$FILE" | cut -d'=' -f2)
      #     NEXT_VERSION=$((CURRENT_VERSION + 1))
      #     sed -i "s/^VERSION_CODE=.*/VERSION_CODE=$NEXT_VERSION/" "$FILE"
      #     sed -i "s/^VERSION_NAME=.*/VERSION_NAME=1.0.0/" "$FILE"
      #     echo "VERSION_CODE=$NEXT_VERSION" >> $GITHUB_ENV
      #     echo "Updated VERSION_CODE=$NEXT_VERSION and VERSION_NAME=1.0.0"

      - name: Update VERSION_CODE and VERSION_NAME
        id: versioning
        run: |
          FILE="android/gradle.properties"

          # Read current VERSION_CODE
          CURRENT_VERSION=$(grep '^VERSION_CODE=' "$FILE" | cut -d'=' -f2)
          NEXT_VERSION=$((CURRENT_VERSION + 1))

          # Read and split current VERSION_NAME
          CURRENT_VERSION_NAME=$(grep '^VERSION_NAME=' "$FILE" | cut -d'=' -f2)
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION_NAME"

          # Increment logic: bump PATCH first
          PATCH=$((PATCH + 1))
          if [ "$PATCH" -gt 10 ]; then
            PATCH=0
            MINOR=$((MINOR + 1))
            if [ "$MINOR" -gt 10 ]; then
              MINOR=0
              MAJOR=$((MAJOR + 1))
            fi
          fi

          NEXT_VERSION_NAME="${MAJOR}.${MINOR}.${PATCH}"

          # Update gradle.properties
          sed -i "s/^VERSION_CODE=.*/VERSION_CODE=$NEXT_VERSION/" "$FILE"
          sed -i "s/^VERSION_NAME=.*/VERSION_NAME=$NEXT_VERSION_NAME/" "$FILE"

          # Export to GitHub env
          echo "VERSION_CODE=$NEXT_VERSION" >> $GITHUB_ENV
          echo "VERSION_NAME=$NEXT_VERSION_NAME" >> $GITHUB_ENV
          echo "Updated VERSION_CODE=$NEXT_VERSION and VERSION_NAME=$NEXT_VERSION_NAME"

      - name: Commit updated VERSION_CODE and VERSION_NAME to Git
        run: |
          git config --global user.name 'salonititps'
          git config --global user.email 'salonit@itpathsolutions.com'
          git add android/gradle.properties
          git commit -m "CI: Auto-increment VERSION_CODE to $VERSION_CODE [skip ci]" || echo "No changes to commit."
          git push origin HEAD:${{ github.ref }}

  #     - name: Build Debug APK
  #       run: |
  #         cd android
  #         ./gradlew assembleDebug

  #     - name: Build Release APK
  #       run: |
  #         cd android
  #         ./gradlew assembleRelease

  #     - name: Install Firebase CLI
  #       if: ${{ github.event.inputs.distribute_to_firebase == 'true' }}
  #       run: npm install -g firebase-tools

  #     - name: Upload Debug APK to Firebase (Debug Testers)
  #       if: ${{ github.event.inputs.distribute_to_firebase == 'true' }}
  #       run: |
  #         firebase appdistribution:distribute android/app/build/outputs/apk/debug/app-debug.apk \
  #           --app 1:167074286498:android:34b05a46f0dbbfe41700fb \
  #           --token ${{ secrets.FIREBASE_TOKEN }} \
  #           --groups debug-testers \
  #           --release-notes "Debug build from GitHub Actions for ${{ github.event.inputs.environment }}"

  #     - name: Upload Release APK to Firebase (Release Testers)
  #       if: ${{ github.event.inputs.distribute_to_firebase == 'true' }}
  #       run: |
  #         firebase appdistribution:distribute android/app/build/outputs/apk/release/app-release.apk \
  #           --app 1:167074286498:android:34b05a46f0dbbfe41700fb \
  #           --token ${{ secrets.FIREBASE_TOKEN }} \
  #           --groups release-testers \
  #           --release-notes "Release build from GitHub Actions for ${{ github.event.inputs.environment }}"

  #     - name: Upload APK Artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: APKs
  #         path: |
  #           android/app/build/outputs/apk/debug/app-debug.apk
  #           android/app/build/outputs/apk/release/app-release.apk

  # build-ios:
  #   name: iOS CI/CD
  #   runs-on: macos-latest
  #   needs: build-android

  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'

  #     - name: Install Dependencies
  #       uses: bahmutov/npm-install@v1

  #     # Set up Ruby (needed for CocoaPods)
  #     - name: Set up Ruby
  #       uses: ruby/setup-ruby@v1
  #       with:
  #         ruby-version: '3.2'

  #     - name: Install CocoaPods
  #       run: sudo gem install cocoapods

  #     # Set up .env file
  #     - name: Setup .env file
  #       run: |
  #         echo "Selected environment: $ENVIRONMENT"

  #         if [ "$ENVIRONMENT" = "production" ]; then
  #           echo "${{ secrets.ENV_PROD_BASE64 }}" | base64 -d > .env
  #           echo ".env file configured for production."
  #         elif [ "$ENVIRONMENT" = "staging" ]; then
  #           echo "${{ secrets.ENV_STAGING_BASE64 }}" | base64 -d > .env
  #           echo ".env file configured for staging."
  #         else
  #           echo "${{ secrets.ENV_DEV_BASE64 }}" | base64 -d > .env
  #           echo ".env file configured for development."
  #         fi
  #         grep -E '^(ENV|BASE_URL)=' .env || echo "No public .env variables found."
  #       env:
  #         ENVIRONMENT: ${{ github.event.inputs.environment }}

  #     # Optional iOS code signing (if required for real device or App Store build)
  #     - name: Setup iOS Signing (Optional)
  #       if: env.ENVIRONMENT != 'dev'
  #       run: |
  #         mkdir -p ~/certs

  #         echo "${{ secrets.IOS_PROVISION_PROFILE_BASE64 }}" | base64 -d > ~/certs/profile.mobileprovision
  #         echo "${{ secrets.IOS_CERT_P12_BASE64 }}" | base64 -d > ~/certs/cert.p12
  #         echo "${{ secrets.IOS_AUTH_KEY_BASE64 }}" | base64 -d > ~/certs/AuthKey.p8

  #         echo "iOS signing files decoded."

  #     - name: Install Pods
  #       run: cd ios && pod install

  #     - name: Build iOS Debug App (Simulator)
  #       run: |
  #         cd ios
  #         xcodebuild -workspace YourApp.xcworkspace \
  #           -scheme YourApp \
  #           -sdk iphonesimulator \
  #           -configuration Debug \
  #           build

  #     - name: Upload iOS Build Artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: iOS Build (Simulator)
  #         path: ios/build
