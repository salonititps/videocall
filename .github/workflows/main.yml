name: React Native CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment for build'
        required: true
        default: 'dev'
        type: choice # string, choice, boolean, environment
        options:
          - dev
          - staging
          - production

      # distribute_to_firebase:
      #   description: 'Firebase App Distribution'
      #   required: false
      #   default: 'false'
      #   type: choice
      #   options:
      #     - 'true'
      #     - 'false'

      distribute_to_firebase:
        description: 'Firebase App Distribution?'
        required: false
        default: 'false'
        type: boolean

      app_name:
        description: 'App Name (optional)'
        required: false
        default: ''
        type: string

jobs:
  build-android:
    name: Android CI/CD
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Dependencies
        uses: bahmutov/npm-install@v1

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      # Setup your .env
      - name: Setup .env file
        run: |
          echo "Selected environment: $ENVIRONMENT"

          if [ "$ENVIRONMENT" = "production" ]; then
            echo "${{ secrets.ENV_PROD_BASE64 }}" | base64 -d > .env
            echo ".env file configured for production."
          elif [ "$ENVIRONMENT" = "staging" ]; then
            echo "${{ secrets.ENV_STAGING_BASE64 }}" | base64 -d > .env
            echo ".env file configured for staging."
          else
            echo "${{ secrets.ENV_DEV_BASE64 }}" | base64 -d > .env
            echo ".env file configured for development."
          fi
          # Only print non-sensitive values here
          grep -E '^(ENV|BASE_URL)=' .env || echo "No public .env variables found."
        env:
          ENVIRONMENT: ${{ github.event.inputs.environment }}

      # Add debug.keystore
      - name: Setup Debug Keystore
        run: |
          mkdir -p android/app
          echo "${{ secrets.DEBUG_KEYSTORE_BASE64 }}" | base64 -d > android/app/debug.keystore

      # Add release.keystore
      - name: Setup Release Keystore
        run: |
          mkdir -p android/app
          echo "${{ secrets.RELEASE_KEYSTORE_BASE64 }}" | base64 -d > android/app/release.keystore

          if [ -f android/app/release.keystore ]; then
            echo "release.keystore created: $(du -h android/app/release.keystore | cut -f1)"
          else
            echo "Failed to create release.keystore!"
            exit 1
          fi

      # Auto change version code and version name
      - name: Update VERSION_CODE and VERSION_NAME
        id: versioning
        run: |
          FILE="android/gradle.properties"

          # Read current VERSION_CODE
          CURRENT_VERSION=$(grep '^VERSION_CODE=' "$FILE" | cut -d'=' -f2)
          NEXT_VERSION=$((CURRENT_VERSION + 1))

          # Read and split current VERSION_NAME
          CURRENT_VERSION_NAME=$(grep '^VERSION_NAME=' "$FILE" | cut -d'=' -f2)
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION_NAME"

          # Increment logic: bump PATCH first
          PATCH=$((PATCH + 1))
          if [ "$PATCH" -gt 10 ]; then
            PATCH=0
            MINOR=$((MINOR + 1))
            if [ "$MINOR" -gt 10 ]; then
              MINOR=0
              MAJOR=$((MAJOR + 1))
            fi
          fi

          NEXT_VERSION_NAME="${MAJOR}.${MINOR}.${PATCH}"

          # Update gradle.properties
          sed -i "s/^VERSION_CODE=.*/VERSION_CODE=$NEXT_VERSION/" "$FILE"
          sed -i "s/^VERSION_NAME=.*/VERSION_NAME=$NEXT_VERSION_NAME/" "$FILE"

          # Export to GitHub env
          echo "VERSION_CODE=$NEXT_VERSION" >> $GITHUB_ENV
          echo "VERSION_NAME=$NEXT_VERSION_NAME" >> $GITHUB_ENV
          echo "Updated VERSION_CODE=$NEXT_VERSION and VERSION_NAME=$NEXT_VERSION_NAME"

      # Auto change application name
      - name: Update App Name in strings.xml (if provided)
        run: |
          APP_NAME="${{ github.event.inputs.app_name }}"
          STRINGS_FILE="android/app/src/main/res/values/strings.xml"

          if [ -n "$APP_NAME" ]; then
            echo "Updating app name in strings.xml to: $APP_NAME"
            sed -i "s|<string name=\"app_name\">.*</string>|<string name=\"app_name\">$APP_NAME</string>|" "$STRINGS_FILE"
          else
            echo "No app_name provided. Skipping app name update."
          fi

      # Pushed changes to repo
      - name: Commit updated VERSION_CODE and VERSION_NAME to Git
        run: |
          git config --global user.name 'salonititps'
          git config --global user.email 'salonit@itpathsolutions.com'

          git add android/gradle.properties
          git add android/app/src/main/res/values/strings.xml

          git commit -m "CI: Updated app name and VERSION_CODE=$VERSION_CODE [skip ci]" || echo "No changes to commit."
          git push origin HEAD:${{ github.ref }}

      - name: Build Debug APK
        run: |
          cd android
          ./gradlew assembleDebug

      - name: Build Release APK
        run: |
          cd android
          ./gradlew assembleRelease
        # env:
        #   RELEASE_KEY_ALIAS: ${{ secrets.RELEASE_KEY_ALIAS }}
        #   RELEASE_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}
        #   RELEASE_STORE_PASSWORD: ${{ secrets.RELEASE_STORE_PASSWORD }}

      - name: Install Firebase CLI
        if: ${{ github.event.inputs.distribute_to_firebase == 'true' }}
        run: npm install -g firebase-tools

      - name: Upload Debug APK to Firebase (Debug Testers)
        if: ${{ github.event.inputs.distribute_to_firebase == 'true' }}
        run: |
          firebase appdistribution:distribute android/app/build/outputs/apk/debug/app-debug.apk \
            --app 1:167074286498:android:34b05a46f0dbbfe41700fb \
            --token ${{ secrets.FIREBASE_TOKEN }} \
            --groups debug-testers \
            --release-notes "Debug build from GitHub Actions for ${{ github.event.inputs.environment }}"

      - name: Upload Release APK to Firebase (Release Testers)
        if: ${{ github.event.inputs.distribute_to_firebase == 'true' }}
        run: |
          firebase appdistribution:distribute android/app/build/outputs/apk/release/app-release.apk \
            --app 1:167074286498:android:34b05a46f0dbbfe41700fb \
            --token ${{ secrets.FIREBASE_TOKEN }} \
            --groups release-testers \
            --release-notes "Release build from GitHub Actions for ${{ github.event.inputs.environment }}"

      # Extract project name and version (from gradle.properties)
      - name: Extract project name and version
        run: |
          # Extract namespace from build.gradle and strip 'com.' if present
          NAMESPACE=$(grep -oP 'namespace\s+"[^"]+"' android/app/build.gradle | cut -d'"' -f2)
          PROJECT_NAME=$(echo "$NAMESPACE" | sed 's/^com\.//')

          # Get version name from gradle.properties and convert to 1_0_1 format
          VERSION_NAME=$(grep '^VERSION_NAME=' android/gradle.properties | cut -d'=' -f2)
          VERSION_NAME_UNDERSCORE=$(echo "$VERSION_NAME" | tr '.' '_')

          # Export to GitHub environment
          echo "PROJECT_NAME=$PROJECT_NAME" >> $GITHUB_ENV
          echo "VERSION_NAME=$VERSION_NAME_UNDERSCORE" >> $GITHUB_ENV

      # Rename APKs using extracted project name and version
      - name: Rename APKs with project name and version
        run: |
          DEBUG_SRC="android/app/build/outputs/apk/debug/app-debug.apk"
          RELEASE_SRC="android/app/build/outputs/apk/release/app-release.apk"

          DEBUG_DEST="android/app/build/outputs/apk/debug/${PROJECT_NAME}_debug_${VERSION_NAME}.apk"
          RELEASE_DEST="android/app/build/outputs/apk/release/${PROJECT_NAME}_release_${VERSION_NAME}.apk"

          mv "$DEBUG_SRC" "$DEBUG_DEST"
          mv "$RELEASE_SRC" "$RELEASE_DEST"

          echo "DEBUG_DEST=$DEBUG_DEST" >> $GITHUB_ENV
          echo "RELEASE_DEST=$RELEASE_DEST" >> $GITHUB_ENV

      # Upload renamed APKs as GitHub Artifacts
      - name: Upload Renamed APKs as Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: APKs_${{ env.VERSION_NAME }}_${{ env.PROJECT_NAME }}
          path: |
            ${{ env.DEBUG_DEST }}
            ${{ env.RELEASE_DEST }}

  build-ios:
    name: iOS CI/CD
    runs-on: macos-latest
    needs: build-android

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Dependencies
        uses: bahmutov/npm-install@v1

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'

      - name: Install CocoaPods
        run: sudo gem install cocoapods

      # env setup
      - name: Set up .env file
        run: |
          echo "Selected environment: $ENVIRONMENT"

          if [ "$ENVIRONMENT" = "production" ]; then
            echo "${{ secrets.ENV_PROD_BASE64 }}" | base64 -d > .env
            echo ".env file configured for production."
          elif [ "$ENVIRONMENT" = "staging" ]; then
            echo "${{ secrets.ENV_STAGING_BASE64 }}" | base64 -d > .env
            echo ".env file configured for staging."
          else
            echo "${{ secrets.ENV_DEV_BASE64 }}" | base64 -d > .env
            echo ".env file configured for development."
          fi

          grep -E '^(ENV|BASE_URL)=' .env || echo "No public .env variables found."
        env:
          ENVIRONMENT: ${{ github.event.inputs.environment }}

      # Change App name dynamically
      - name: Update App Name in Info.plist (if provided)
        run: |
          APP_NAME="${{ github.event.inputs.app_name }}"
          INFO_PLIST="ios/VideoCalling/Info.plist"

          if [ -n "$APP_NAME" ]; then
            echo "Updating app name in Info.plist to: $APP_NAME"
            /usr/libexec/PlistBuddy -c "Set :CFBundleDisplayName $APP_NAME" "$INFO_PLIST"
            /usr/libexec/PlistBuddy -c "Set :CFBundleName $APP_NAME" "$INFO_PLIST"
          else
            echo "No app_name provided. Skipping app name update."
          fi

      # - name: Update VERSION_CODE and VERSION_NAME in Xcode project
      #   run: |
      #     PLIST_FILE="ios/VideoCalling/Info.plist"

      #     CURRENT_BUILD_NUMBER=$(/usr/libexec/PlistBuddy -c "Print CFBundleVersion" "$PLIST_FILE")
      #     NEXT_BUILD_NUMBER=$((CURRENT_BUILD_NUMBER + 1))

      #     CURRENT_VERSION=$(/usr/libexec/PlistBuddy -c "Print CFBundleShortVersionString" "$PLIST_FILE")
      #     IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

      #     PATCH=$((PATCH + 1))
      #     if [ "$PATCH" -gt 10 ]; then
      #       PATCH=0
      #       MINOR=$((MINOR + 1))
      #       if [ "$MINOR" -gt 10 ]; then
      #         MINOR=0
      #         MAJOR=$((MAJOR + 1))
      #       fi
      #     fi

      #     NEXT_VERSION="${MAJOR}.${MINOR}.${PATCH}"

      #     /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $NEXT_BUILD_NUMBER" "$PLIST_FILE"
      #     /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString $NEXT_VERSION" "$PLIST_FILE"

      #     echo "VERSION_CODE=$NEXT_BUILD_NUMBER" >> $GITHUB_ENV
      #     echo "VERSION_NAME=$NEXT_VERSION" >> $GITHUB_ENV
      #     echo "Updated VERSION_CODE=$NEXT_BUILD_NUMBER and VERSION_NAME=$NEXT_VERSION"

      - name: Commit version and app name updates (if any)
        run: |
          git config --global user.name 'salonititps'
          git config --global user.email 'salonit@itpathsolutions.com'

          git add ios/YourApp/Info.plist

          git commit -m "CI: Updated iOS app name and version [skip ci]" || echo "No changes to commit."
          git push origin HEAD:${{ github.ref }}

      - name: Setup iOS Signing (Only for staging/production)
        if: ${{ github.event.inputs.environment != 'dev' }}
        run: |
          mkdir -p ~/certs
          echo "${{ secrets.IOS_PROVISION_PROFILE_BASE64 }}" | base64 -d > ~/certs/profile.mobileprovision
          echo "${{ secrets.IOS_CERT_P12_BASE64 }}" | base64 -d > ~/certs/cert.p12
          echo "${{ secrets.IOS_AUTH_KEY_BASE64 }}" | base64 -d > ~/certs/AuthKey.p8
          echo "iOS signing files decoded."

      - name: Install Pods
        run: cd ios && pod install

      - name: Build iOS App (Simulator Debug)
        run: |
          cd ios
          xcodebuild -workspace YourApp.xcworkspace \
            -scheme YourApp \
            -sdk iphonesimulator \
            -configuration Debug \
            -derivedDataPath build

      - name: Build iOS App (Device Release)
        run: |
          cd ios
          xcodebuild -workspace YourApp.xcworkspace \
            -scheme YourApp \
            -sdk iphoneos \
            -configuration Release \
            -derivedDataPath build

      - name: Upload iOS Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: iOS Build
          path: ios/build

      - name: Install Firebase CLI
        if: ${{ github.event.inputs.distribute_to_firebase == 'true' }}
        run: npm install -g firebase-tools

      - name: Upload iOS App to Firebase
        if: ${{ github.event.inputs.distribute_to_firebase == 'true' }}
        run: |
          IPA_PATH="ios/build/Build/Products/Release-iphoneos/YourApp.ipa"
          firebase appdistribution:distribute "$IPA_PATH" \
            --app your_ios_firebase_app_id \
            --token ${{ secrets.FIREBASE_TOKEN }} \
            --groups ios-testers \
            --release-notes "iOS build from GitHub Actions for ${{ github.event.inputs.environment }}"
